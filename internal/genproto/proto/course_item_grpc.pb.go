// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.3
// source: course_item.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CourseItemService_Create_FullMethodName  = "/proto.CourseItemService/Create"
	CourseItemService_Update_FullMethodName  = "/proto.CourseItemService/Update"
	CourseItemService_Delete_FullMethodName  = "/proto.CourseItemService/Delete"
	CourseItemService_GetById_FullMethodName = "/proto.CourseItemService/GetById"
	CourseItemService_GetList_FullMethodName = "/proto.CourseItemService/GetList"
)

// CourseItemServiceClient is the client API for CourseItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseItemServiceClient interface {
	Create(ctx context.Context, in *CreateCourseItem, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *UpdateCourseItem, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*CourseItemRes, error)
	GetList(ctx context.Context, in *GetListCourseItemReq, opts ...grpc.CallOption) (*GetListCourseItemRes, error)
}

type courseItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseItemServiceClient(cc grpc.ClientConnInterface) CourseItemServiceClient {
	return &courseItemServiceClient{cc}
}

func (c *courseItemServiceClient) Create(ctx context.Context, in *CreateCourseItem, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CourseItemService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseItemServiceClient) Update(ctx context.Context, in *UpdateCourseItem, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CourseItemService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseItemServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CourseItemService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseItemServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*CourseItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourseItemRes)
	err := c.cc.Invoke(ctx, CourseItemService_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseItemServiceClient) GetList(ctx context.Context, in *GetListCourseItemReq, opts ...grpc.CallOption) (*GetListCourseItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListCourseItemRes)
	err := c.cc.Invoke(ctx, CourseItemService_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseItemServiceServer is the server API for CourseItemService service.
// All implementations must embed UnimplementedCourseItemServiceServer
// for forward compatibility.
type CourseItemServiceServer interface {
	Create(context.Context, *CreateCourseItem) (*Void, error)
	Update(context.Context, *UpdateCourseItem) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	GetById(context.Context, *ById) (*CourseItemRes, error)
	GetList(context.Context, *GetListCourseItemReq) (*GetListCourseItemRes, error)
	mustEmbedUnimplementedCourseItemServiceServer()
}

// UnimplementedCourseItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCourseItemServiceServer struct{}

func (UnimplementedCourseItemServiceServer) Create(context.Context, *CreateCourseItem) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCourseItemServiceServer) Update(context.Context, *UpdateCourseItem) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCourseItemServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCourseItemServiceServer) GetById(context.Context, *ById) (*CourseItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCourseItemServiceServer) GetList(context.Context, *GetListCourseItemReq) (*GetListCourseItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedCourseItemServiceServer) mustEmbedUnimplementedCourseItemServiceServer() {}
func (UnimplementedCourseItemServiceServer) testEmbeddedByValue()                           {}

// UnsafeCourseItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseItemServiceServer will
// result in compilation errors.
type UnsafeCourseItemServiceServer interface {
	mustEmbedUnimplementedCourseItemServiceServer()
}

func RegisterCourseItemServiceServer(s grpc.ServiceRegistrar, srv CourseItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedCourseItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CourseItemService_ServiceDesc, srv)
}

func _CourseItemService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseItemServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseItemService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseItemServiceServer).Create(ctx, req.(*CreateCourseItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseItemService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseItemServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseItemService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseItemServiceServer).Update(ctx, req.(*UpdateCourseItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseItemService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseItemServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseItemService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseItemServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseItemService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseItemServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseItemService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseItemServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseItemService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCourseItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseItemServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseItemService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseItemServiceServer).GetList(ctx, req.(*GetListCourseItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseItemService_ServiceDesc is the grpc.ServiceDesc for CourseItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CourseItemService",
	HandlerType: (*CourseItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CourseItemService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CourseItemService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CourseItemService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CourseItemService_GetById_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _CourseItemService_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course_item.proto",
}
